// services/protos/registry_service.proto
syntax = "proto3";

package registry;

service RegistryService {
    // Service registration
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc Deregister(DeregisterRequest) returns (DeregisterResponse);
    
    // Service discovery
    rpc GetService(GetServiceRequest) returns (GetServiceResponse);
    rpc ListServices(ListServicesRequest) returns (ListServicesResponse);
    
    // Health checks
    rpc ReportHealth(HealthReport) returns (HealthResponse);
    
    // Configuration management
    rpc SetConfig(SetConfigRequest) returns (SetConfigResponse);
    rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);
    rpc WatchConfig(WatchConfigRequest) returns (stream ConfigUpdate);
}

message RegisterRequest {
    string service_name = 1;
    string host = 2;
    int32 port = 3;
    map<string, string> metadata = 4;
    string version = 5;
}

message RegisterResponse {
    bool success = 1;
    string service_id = 2;
    string message = 3;
}

message DeregisterRequest {
    string service_id = 1;
}

message DeregisterResponse {
    bool success = 1;
    string message = 2;
}

message GetServiceRequest {
    string service_name = 1;
}

message GetServiceResponse {
    ServiceInfo service = 1;
}

message ListServicesRequest {
    // Optional filters can be added here
}

message ListServicesResponse {
    repeated ServiceInfo services = 1;
}

message ServiceInfo {
    string service_id = 1;
    string service_name = 2;
    string host = 3;
    int32 port = 4;
    map<string, string> metadata = 5;
    string status = 6;
    string version = 7;
    string last_heartbeat = 8;
}

message HealthReport {
    string service_id = 1;
    bool is_healthy = 2;
    string message = 3;
}

message HealthResponse {
    bool success = 1;
    string message = 2;
}

message SetConfigRequest {
    string key = 1;
    string value = 2;
}

message SetConfigResponse {
    bool success = 1;
    string message = 2;
}

message GetConfigRequest {
    string key = 1;
}

message GetConfigResponse {
    string value = 1;
    bool exists = 2;
}

message WatchConfigRequest {
    string prefix = 1;
}

message ConfigUpdate {
    string key = 1;
    string value = 2;
    string event_type = 3;  // "PUT" or "DELETE"
}
